using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PropertyManager.Models;

namespace PropertyManager.Services
{
    interface IService
    {
        admin GetAdminByToken(TokenModel token);
        admin LoginAdmin(AdminModel model);
        List<admin> SuperAdminGetListAdmin(string search);
        List<admin> GetListAdminByParentId(string search, int id);
        string GetRoleName(int role);
        admin GetAdminById(int id);
        List<admin> GetListLeader();
        void SaveAdmin(admin acc);
        List<apartment> GetListApartment(int status, string search);
        apartment GetApartmentById(int id);
        FacilityContentModel ConvertFacilityContentToModel(facility_content model);
        List<ApartmentContentModel> GetApartmentContentList(ICollection<apartment_content> apartmentApartmentContent);
        void SaveApartment(apartment apartment);
        void Dispose();
        string SaveImage(string path, string imageName, string image);
        void SaveApartmentImage(aparment_image img);
        void DeleteApartmentImage(aparment_image item);
        void SaveApartmentFacility(apartment_facility aptFac);
        void DeleteApartmentFacility(apartment_facility item);
        apartment_content GetApartmentContentById(int id);
        void SaveApartmentContent(apartment_content content);
        List<facility> GetAllFacilities();
        project GetProjectByName(string name);
        void SaveProject(project project);
        void SaveProjectContent(project_content content);
        user_profile GetUserProfileByNameAndPhone(string name, string phone);
        void SaveUserProfile(user_profile userProfile);
        void SaveListApartment(List<apartment> lst);
        List<user_visit> SearchListUserVisit(int status);
        user_visit GetUserVisitById(int id);
        void DeleteUserVisit(user_visit userVisit);
        user_profile GetUserProfileById(int userProfileId);
        user_visit_item GetUserVisitItemById(int id);
        void SaveUserVisit(user_visit visit);
        void SaveUserVisitItem(user_visit_item visitItem);
        user_visit_history GetUserVisitHistoryById(int id);
        void SaveUserVisitHistory(user_visit_history his);
        employee GetMaidById(int id);
        void SaveEmployee(employee employee);
        List<employee> SearchListActiveMaid(FilterModel filter);
        string GetEmployeeRoleName(int role);
        employee GetActiveMaidById(int id);
        List<employee> GetAllActiveMaid();
        employee MaidLogin(EmployeeModel model);
        List<issue> GetAllIssue();
        issue GetIssueById(int id);
        void SaveIssue(issue issue);
        contract GetContractById(int id);
        void SaveContract(contract contract);
        List<apartment> SearchAllApartmentByCode(string search);
        List<company> SearchAllCompany(string search);
        user_profile GetUserProfileByEmail(string email);
        void SaveUserAccount(user_account userAccount);
        List<user_profile> GetListUserProfile(string search);
        void SaveCompany(company company);
        List<admin> GetAllSaleAccount();
        List<project> GetAllProject();
        ProjectContentModel ConvertProjectContentToModel(project_content firstOrDefault);
        List<contract> SearchListContract(FilterModel filter);
        List<contract> GetCountContractThisYear();
        company GetCompanyById(int id);
        List<contract> SearchAllParentContract(string search);
        EmployeeModel GetMaidModelByContractId(int contractId);
        contract_employee GetContractEmployeeByContractIdAndEmployeeId(int contractId, int maidId);
        contract_employee GetLastContractEmployeeByContractId(int contractId);
        void SaveContractEmployee(contract_employee model);
        apartment GetApartmentByCode(string code);
        contract GetCurrentParentContractByApartmentId(int apartmentId);
        void SaveApartmentEmployee(apartment_employee model);
        apartment_employee GetLastApartmentEmployeeByApartmentIdAndEmployeeId(int apartmentId, int employeeId);
        apartment_employee GetLastApartmentEmployeeNotCheckOutByEmployeeId(int employeeId);
        void SaveListApartmentEmployeeIssue(List<apartment_employee_issue> listIssue);
        void SaveProblem(problem problem);
        void SaveListProblemImage(List<problem_image> listImage);
        List<contract> GetAllCurrentContractByEmployeeId(int employeeId);
        contract GetCurrentContractByApartmentAndEmployeeId(int apartmentId, int employeeId);
        void SaveUserProfileNote(user_profile_note note);
        List<user_profile_note> GetAllUserProfileNoteByUserProfileId(int userProfileId);
        problem GetProblemById(int id);
        List<problem_image> GetAllProblemImageByProblemId(int problemId);
        void DeleteProblemImage(int id);
        void SaveEmployeeNote(employee_note note);
        void DeleteEmployeeNote(int id);
        void DeleteUserProfileNote(int id);
        List<contract_employee> GetAllCurrentContractEmployeeByEmployeeId(int employeeId);
    }
}
